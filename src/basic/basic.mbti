package KCN-judu/calculus-numerical/basic

// Values
fn arr_sum_dbl(Array[Double]) -> Double

fn clamp[T : Compare](T, T, T) -> T

fn find[T : Eq](Array[T], T) -> Int?

fn hypot(Double, Double) -> Double

let integer_one : Integer

let integer_zero : Integer

fn is_between[T : Compare](T, T, T) -> Bool

let math_1_pi : Double

let math_2_pi : Double

let math_2_sqrt_pi : Double

let math_e : Double

let math_euler : Double

let math_ln_10 : Double

let math_ln_2 : Double

let math_ln_pi : Double

let math_log_10_e : Double

let math_log_2_e : Double

let math_pi : Double

let math_pi_2 : Double

let math_pi_4 : Double

let math_sqrt_1_2 : Double

let math_sqrt_2 : Double

let math_sqrt_3 : Double

let math_sqrt_pi : Double

fn max[T : Compare](T, T) -> T

fn min[T : Compare](T, T) -> T

fn pow_integer_exp(Double, Integer) -> Double

fn reverse[T](Array[T]) -> Array[T]

fn reverse_inplace[T](Array[T]) -> Unit

fn sqrt(Double) -> Double

fn zero_arr_dbl(Int) -> Array[Double]

// Types and methods
pub(all) enum Integer {
  IntegerInt(Int)
  IntegerInt64(Int64)
  Integer(BigInt)
}
impl Show for Integer

// Type aliases
pub typealias Func_Math = (Double) -> Double

pub typealias Quad_GK = ((Double) -> Double, Double, Double) -> (Double, Double, Double, Double)

// Traits
pub(open) trait Integral : Eq + Compare + Show {
  to_integer(Self) -> Integer
}
impl Integral for Int
impl Integral for Int64
impl Integral for BigInt

